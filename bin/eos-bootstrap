#!/usr/bin/env python

import sys
import os
import json
import argparse
import subprocess
import logging
import time
import requests
import yaml

from aeon.eos.device import Device
from aeon.exceptions import ProbeError, UnauthorizedError
from aeon.exceptions import ConfigError, CommandError

_OS_NAME = 'eos'
_PROGNAME = '%s-bootstrap' % _OS_NAME
_PROGVER = '0.0.1'

# ##### -----------------------------------------------------------------------
# #####
# #####                           Command Line Arguments
# #####
# ##### -----------------------------------------------------------------------

psr = argparse.ArgumentParser(
    prog=_PROGNAME,
    description="Aeon ZTP bootstrapper for Arista EOS",
    add_help=True)

psr.add_argument(
    '--target', required=True,
    help='hostname or ip_addr of target device')

psr.add_argument(
    '--server', required=True,
    help='Aeon ZTP server host:port')

psr.add_argument(
    '--topdir', required=True,
    help='toplevel directory aztp installation files')

psr.add_argument(
    '--logfile',
    help='name of log file')

psr.add_argument(
    '--reload-delay',
    dest='reload_delay',
    type=int, default=10*60,
    help="about of time/s to try to reconnect to device after reload")

psr.add_argument(
    '--init-delay',
    dest='init_delay',
    type=int, default=60,
    help="amount of time/s to wait before starting the bootstrap process")

# ##### -------------------------
# ##### authentication
# ##### -------------------------

group = psr.add_argument_group('authentication')

group.add_argument(
    '--user', help='login user-name')

group.add_argument(
    '-U', dest='env_user',
    help='Username environment variable')

group.add_argument(
    '-P', dest='env_passwd',
    required=True,
    help='Passwd environment variable')

g_cli_args = psr.parse_args()
g_self_server = g_cli_args.server


def setup_logging(logname, logfile, target):
    log = logging.getLogger(name=logname)
    log.setLevel(logging.INFO)

    fmt = logging.Formatter(
        '%(asctime)s:%(levelname)s:{target}:%(message)s'
        .format(target=target))

    handler = logging.FileHandler(logfile) if logfile else logging.StreamHandler(sys.stdout)
    handler.setFormatter(fmt)
    log.addHandler(handler)

    return log


g_log = setup_logging(logname=_PROGNAME,
                      logfile=g_cli_args.logfile,
                      target=g_cli_args.target)


# ##### -----------------------------------------------------------------------
# #####
# #####                           REST API functions
# #####
# ##### -----------------------------------------------------------------------

def post_device_facts(dev):
    requests.put(
        url='http://%s/api/devices/facts' % g_self_server,
        json=dict(
            ip_addr=dev.target,
            serial_number=dev.facts['serial_number'],
            hw_model=dev.facts['hw_model'],
            os_version=dev.facts['os_version'],
            os_name=_OS_NAME))


def post_device_status(dev=None, target=None, message=None, state=None):
    requests.put(
        url='http://%s/api/devices/status' % g_self_server,
        json=dict(
            os_name=_OS_NAME,
            ip_addr=target or dev.target,
            state=state, message=message))


# ##### -----------------------------------------------------------------------
# #####
# #####                           Utility Functions
# #####
# ##### -----------------------------------------------------------------------

def exit_results(results, exit_error=None, dev=None, target=None):
    if results['ok']:
        post_device_status(dev=dev, target=target, state='DONE', message='bootstrap completed OK')
        sys.exit(0)
    else:
        post_device_status(dev=dev, target=target, state='FAILED', message=results['message'])
        sys.exit(exit_error or 1)


def wait_for_device(countdown, poll_delay):
    target = g_cli_args.target
    user = g_cli_args.user or os.getenv(g_cli_args.env_user)
    passwd = os.getenv(g_cli_args.env_passwd)

    if not user:
        errmsg = "login user-name missing"
        g_log.error(errmsg)
        exit_results(target=target, results=dict(
            ok=False,
            error_type='login',
            message=errmsg))

    if not passwd:
        errmsg = "login user-password missing"
        g_log.error(errmsg)
        exit_results(target=target, results=dict(
            ok=False,
            error_type='login',
            message=errmsg))

    dev = None

    # first we need to wait for the device to be 'reachable' via the API.
    # we'll use the probe error to detect if it is or not

    while not dev:
        msg = 'reload-countdown at: {} seconds'.format(countdown)
        post_device_status(target=target, state='AWAIT-ONLINE', message=msg)
        g_log.info(msg)

        try:
            dev = Device(target, user=user, passwd=passwd, timeout=poll_delay)

        except CommandError:
            # this means that the device is probe-able, but unable to use the API
            # for some reason; likely the process is not yet ready.  need to
            # 'manually' invoke the poll delay.
            countdown -= poll_delay
            if countdown <= 0:
                exit_results(dev=dev, results=dict(
                    ok=False,
                    error_type='login',
                    message='Failed to access %s device API within reload countdown' % target))
            time.sleep(poll_delay)

        except ProbeError:
            countdown -= poll_delay
            if countdown <= 0:
                exit_results(dev=dev, results=dict(
                    ok=False,
                    error_type='login',
                    message='Failed to probe target %s within reload countdown' % target))

        except UnauthorizedError:
            exit_results(dev=dev, results=dict(
                ok=False,
                error_type='login',
                message='Unauthorized - check user/password'))

    post_device_facts(dev)
    return dev


# ##### -----------------------------------------------------------------------
# #####
# #####                           General config process
# #####
# ##### -----------------------------------------------------------------------

def do_push_config(dev):
    topdir = g_cli_args.topdir
    config_dir = os.path.join(topdir, 'etc', 'configs', _OS_NAME)
    all_fpath = os.path.join(config_dir, 'all.conf')
    model_fpath = os.path.join(config_dir, dev.facts['hw_model'] + '.conf')
    changed = False

    post_device_status(
        dev=dev, state='CONFIG',
        message='applying general config from %s' % config_dir)

    try:
        if os.path.isfile(all_fpath):
            g_log.info('reading from: {}'.format(all_fpath))
            conf = open(all_fpath).read().split('\n')
            g_log.info('pushing all config to device')
            dev.api.configure(conf)
            changed = True
        else:
            g_log.info('no all.conf file found')

        if os.path.isfile(model_fpath):
            g_log.info('reading model config from: {}'.format(model_fpath))
            conf = open(model_fpath).read().split('\n')
            g_log.info('pushing model config to device')
            dev.api.configure(conf)
            changed = True
        else:
            g_log.info('no model config file found: {}'.format(model_fpath))

    except ConfigError as exc:
        errmsg = str(exc.exc)
        g_log.critical("unable to push config: {}".format(errmsg))
        exit_results(dict(
            ok=False,
            error_type='config',
            message=errmsg))

    if changed is True:
        dev.api.execute(['enable', 'copy running-config startup-config'])
        g_log.info('config completed OK.')


# ##### -----------------------------------------------------------------------
# #####
# #####                           OS install process
# #####
# ##### -----------------------------------------------------------------------

def ensure_md5sum(filepath):
    md5sum_fpath = filepath + ".md5"

    def rd_md5sum():
        return open(md5sum_fpath).read().split()[0]

    if os.path.isfile(md5sum_fpath):
        return rd_md5sum()

    proc = subprocess.Popen('/usr/bin/md5sum {} > {}'.format(
        filepath, md5sum_fpath), shell=True,
        stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    proc.communicate()
    return rd_md5sum()


def check_os_install(dev):
    profile_dir = os.path.join(g_cli_args.topdir, 'etc', 'profiles', 'default', _OS_NAME)
    conf_fpath = os.path.join(profile_dir, 'os-selector.cfg')

    cmd = "{topdir}/bin/aztp-os-selector -j '{dev_json}' -c {config}".format(
        topdir=g_cli_args.topdir,
        dev_json=json.dumps(dev.facts),
        config=conf_fpath)

    g_log.info('os-select: [%s]' % cmd)

    child = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)

    _stdout, _stderr = child.communicate()
    g_log.info('os-select rc={}, stdout={}'.format(child.returncode, _stdout))
    g_log.info('os-select stderr={}'.format(_stderr))

    try:
        results = json.loads(_stdout)

    except Exception as exc:
        errmsg = 'Unable to load os-select output as JSON: {}'.format(_stdout)
        exit_results(dev=dev, results=dict(
            ok=False,
            error_type='config',
            message=errmsg))

    return results


def do_os_install(dev, image_name):

    vendor_dir = os.path.join(g_cli_args.topdir, 'vendor_images', _OS_NAME)
    image_fpath = os.path.join(vendor_dir, image_name)

    if not os.path.isfile(image_fpath):
        errmsg = 'image file {} does not exist'.format(image_fpath)
        exit_results(dev=dev, results=dict(
            ok=False,
            error_type='install',
            message=errmsg))

    md5sum = ensure_md5sum(filepath=image_fpath)
    msg = 'installing OS image [{}] ... please be patient'.format(image_name)
    post_device_status(dev=dev, state='OS-INSTALL', message=msg)

    msg = 'installing OS image [{}] ... please be patient'.format(image_name)
    g_log.info(msg)
    post_device_status(dev=dev, state='OS-INSTALL', message=msg)

    # --------------------------------
    # check for file already on device
    # --------------------------------

    try:
        dev.api.execute('dir flash:%s' % image_name)
        g_log.info('file already exists on device, skipping copy.')
        has_file = True
    except CommandError:
        has_file = False

    def do_copy_file():
        # -------------------------
        # copy image file to device
        # -------------------------

        cmds = ['routing-context vrf {}'.format(dev.api.VRF_MGMT),
                'copy http://{server}/images/{OS}/{filename} flash:'
                .format(server=g_self_server, OS=_OS_NAME,
                        filename=image_name)]

        try:
            dev.api.execute(cmds)
            g_log.info('copy OS image file completed.')

        except Exception as exc:
            errmsg = "Unable to copy file to device: %s" % str(exc)
            g_log.error(errmsg)
            exit_results(dev=dev, results=dict(
                ok=False,
                error_type='install',
                message=errmsg))

    if not has_file:
        do_copy_file()

    # -------------------
    # verify MD5 checksum
    # -------------------

    got_md5 = dev.api.execute('verify /md5 flash:{}'.format(image_name))
    has_md5 = got_md5['messages'][0].split('=')[-1].strip()
    if has_md5 != md5sum:
        errmsg = 'image file {filename} MD5 mismatch has={has} should={should}' \
            .format(filename=image_name,
                    has=has_md5, should=md5sum)

        g_log.error(errmsg)
        exit_results(dev=dev, results=dict(
            ok=False,
            error_type='install',
            message=errmsg))

    g_log.info('md5sum checksum OK.')

    # ---------------------------------------------
    # configure to use this version for system boot
    # ---------------------------------------------

    dev.api.configure(['boot system flash:%s' % image_name])
    dev.api.execute('copy running-config status-config')


def do_ensure_os_version(dev):
    os_install = check_os_install(dev)
    image_name = os_install['image']
    if not image_name:
        g_log.info('no software install required')
        return dev

    g_log.info('software image install required: %s' % image_name)
    do_os_install(dev, image_name=image_name)

    g_log.info('software install OK')
    g_log.info('rebooting device ... please be patient')

    post_device_status(
        dev, state='REBOOTING',
        message='OS install %s completed, now rebooting'
                ' ... please be patient' % image_name)

    dev.api.execute('reload now')
    time.sleep(g_cli_args.init_delay)
    return wait_for_device(countdown=g_cli_args.reload_delay, poll_delay=10)


# ##### -----------------------------------------------------------------------
# #####
# #####                           !!! MAIN !!!
# #####
# ##### -----------------------------------------------------------------------

def main():
    if not os.path.isdir(g_cli_args.topdir):
        exit_results(dict(
            ok=False,
            error_type='args',
            message='{} is not a directory'.format(g_cli_args.topdir)))

    g_log.info("starting bootstrap process in {} seconds"
               .format(g_cli_args.init_delay))

    post_device_status(
        target=g_cli_args.target,
        state='START',
        message='bootstrap started, waiting for device access')

    time.sleep(g_cli_args.init_delay)
    dev = wait_for_device(countdown=g_cli_args.reload_delay, poll_delay=10)

    g_log.info("proceeding with bootstrap")

    do_push_config(dev)
    do_ensure_os_version(dev)

    g_log.info("bootstrap process finished")
    exit_results(dict(ok=True), dev=dev)

if '__main__' == __name__:
    main()
